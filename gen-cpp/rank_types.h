/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef rank_TYPES_H
#define rank_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace idl { namespace ecom_rec { namespace thor {

class Req;

class Rsp;

typedef struct _Req__isset {
  _Req__isset() : uid(false), device_id(false), channel_id(false), ab_params(false) {}
  bool uid :1;
  bool device_id :1;
  bool channel_id :1;
  bool ab_params :1;
} _Req__isset;

class Req : public virtual ::apache::thrift::TBase {
 public:

  Req(const Req&);
  Req& operator=(const Req&);
  Req() noexcept;

  virtual ~Req() noexcept;
  int64_t uid;
  int64_t device_id;
  int64_t channel_id;
  std::string ab_params;

  _Req__isset __isset;

  void __set_uid(const int64_t val);

  void __set_device_id(const int64_t val);

  void __set_channel_id(const int64_t val);

  void __set_ab_params(const std::string& val);

  bool operator == (const Req & rhs) const;
  bool operator != (const Req &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Req & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Req &a, Req &b);

std::ostream& operator<<(std::ostream& out, const Req& obj);

typedef struct _Rsp__isset {
  _Rsp__isset() : items(false), user_level(false) {}
  bool items :1;
  bool user_level :1;
} _Rsp__isset;

class Rsp : public virtual ::apache::thrift::TBase {
 public:

  Rsp(const Rsp&);
  Rsp& operator=(const Rsp&);
  Rsp() noexcept;

  virtual ~Rsp() noexcept;
  std::vector<int64_t>  items;
  int32_t user_level;

  _Rsp__isset __isset;

  void __set_items(const std::vector<int64_t> & val);

  void __set_user_level(const int32_t val);

  bool operator == (const Rsp & rhs) const;
  bool operator != (const Rsp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Rsp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Rsp &a, Rsp &b);

std::ostream& operator<<(std::ostream& out, const Rsp& obj);

}}} // namespace

#endif
