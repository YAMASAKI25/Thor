/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "rank_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace idl { namespace ecom_rec { namespace thor {


Req::~Req() noexcept {
}

Req::Req() noexcept
   : uid(0),
     device_id(0),
     channel_id(0),
     ab_params() {
}

void Req::__set_uid(const int64_t val) {
  this->uid = val;
}

void Req::__set_device_id(const int64_t val) {
  this->device_id = val;
__isset.device_id = true;
}

void Req::__set_channel_id(const int64_t val) {
  this->channel_id = val;
__isset.channel_id = true;
}

void Req::__set_ab_params(const std::string& val) {
  this->ab_params = val;
__isset.ab_params = true;
}
std::ostream& operator<<(std::ostream& out, const Req& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Req::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->device_id);
          this->__isset.device_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->channel_id);
          this->__isset.channel_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ab_params);
          this->__isset.ab_params = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Req::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Req");

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->uid);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.device_id) {
    xfer += oprot->writeFieldBegin("device_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->device_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.channel_id) {
    xfer += oprot->writeFieldBegin("channel_id", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->channel_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ab_params) {
    xfer += oprot->writeFieldBegin("ab_params", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->ab_params);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Req &a, Req &b) {
  using ::std::swap;
  swap(a.uid, b.uid);
  swap(a.device_id, b.device_id);
  swap(a.channel_id, b.channel_id);
  swap(a.ab_params, b.ab_params);
  swap(a.__isset, b.__isset);
}

bool Req::operator==(const Req & rhs) const
{
  if (!(uid == rhs.uid))
    return false;
  if (__isset.device_id != rhs.__isset.device_id)
    return false;
  else if (__isset.device_id && !(device_id == rhs.device_id))
    return false;
  if (__isset.channel_id != rhs.__isset.channel_id)
    return false;
  else if (__isset.channel_id && !(channel_id == rhs.channel_id))
    return false;
  if (__isset.ab_params != rhs.__isset.ab_params)
    return false;
  else if (__isset.ab_params && !(ab_params == rhs.ab_params))
    return false;
  return true;
}

Req::Req(const Req& other0) {
  uid = other0.uid;
  device_id = other0.device_id;
  channel_id = other0.channel_id;
  ab_params = other0.ab_params;
  __isset = other0.__isset;
}
Req& Req::operator=(const Req& other1) {
  uid = other1.uid;
  device_id = other1.device_id;
  channel_id = other1.channel_id;
  ab_params = other1.ab_params;
  __isset = other1.__isset;
  return *this;
}
void Req::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Req(";
  out << "uid=" << to_string(uid);
  out << ", " << "device_id="; (__isset.device_id ? (out << to_string(device_id)) : (out << "<null>"));
  out << ", " << "channel_id="; (__isset.channel_id ? (out << to_string(channel_id)) : (out << "<null>"));
  out << ", " << "ab_params="; (__isset.ab_params ? (out << to_string(ab_params)) : (out << "<null>"));
  out << ")";
}


Rsp::~Rsp() noexcept {
}

Rsp::Rsp() noexcept
   : user_level(0) {
}

void Rsp::__set_items(const std::vector<int64_t> & val) {
  this->items = val;
}

void Rsp::__set_user_level(const int32_t val) {
  this->user_level = val;
}
std::ostream& operator<<(std::ostream& out, const Rsp& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Rsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->items.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->items.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += iprot->readI64(this->items[_i6]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.items = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->user_level);
          this->__isset.user_level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Rsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Rsp");

  xfer += oprot->writeFieldBegin("items", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->items.size()));
    std::vector<int64_t> ::const_iterator _iter7;
    for (_iter7 = this->items.begin(); _iter7 != this->items.end(); ++_iter7)
    {
      xfer += oprot->writeI64((*_iter7));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_level", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->user_level);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Rsp &a, Rsp &b) {
  using ::std::swap;
  swap(a.items, b.items);
  swap(a.user_level, b.user_level);
  swap(a.__isset, b.__isset);
}

bool Rsp::operator==(const Rsp & rhs) const
{
  if (!(items == rhs.items))
    return false;
  if (!(user_level == rhs.user_level))
    return false;
  return true;
}

Rsp::Rsp(const Rsp& other8) {
  items = other8.items;
  user_level = other8.user_level;
  __isset = other8.__isset;
}
Rsp& Rsp::operator=(const Rsp& other9) {
  items = other9.items;
  user_level = other9.user_level;
  __isset = other9.__isset;
  return *this;
}
void Rsp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Rsp(";
  out << "items=" << to_string(items);
  out << ", " << "user_level=" << to_string(user_level);
  out << ")";
}

}}} // namespace
